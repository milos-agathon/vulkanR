<claude-code-task version="1.0">
  <metadata>
    <milestone>2</milestone>
    <name>Fix tests: adapt vk_render() to 5-arg or 6-arg vk_render_headless()</name>
    <safety-policy>read-first-patch-later</safety-policy>
  </metadata>

  <goal>
    Make devtools::test() pass by adapting R/vk_render() to the current vk_render_headless() arity:
    - If vk_render_headless() has 6 formals (RGBA), pass width,height,r,g,b,a.
    - Otherwise pass width,height,r,g,b (no alpha).
    - If a call still raises "unused argument", retry with 5 args.
    Re-install and run tests locally. No Rust edits, no git push/PR.
  </goal>

  <constraints>
    <item>Do not rename or remove public APIs.</item>
    <item>Local-only; no remote pushes or PRs.</item>
    <item>Keep patch minimal; unified diff for R/api-render.R only.</item>
  </constraints>

  <tools-allowed>
    <tool>LS</tool>
    <tool>Read</tool>
    <tool>Grep</tool>
    <tool>Edit</tool>
    <tool>MultiEdit</tool>
    <tool>Write</tool>
    <tool>PowerShell</tool>
    <tool>Bash</tool>
  </tools-allowed>

  <!-- 0) INVENTORY -->
  <repository-inventory required="true">
    <list-dirs>
      <path>.</path>
      <path>R/</path>
      <path>tests/</path>
      <path>tests/testthat/</path>
      <path>NAMESPACE</path>
      <path>DESCRIPTION</path>
    </list-dirs>
    <assert-exists>
      <path>R/api-render.R</path>
    </assert-exists>
    <output>inventory-report</output>
  </repository-inventory>

  <!-- 1) PLAN -->
  <plan required="true">
    <step>Patch R/api-render.R: in vk_render(), detect the arity of vk_render_headless() via formals().</step>
    <step>If 6 or more formals, call with RGBA (adds alpha=255). Else call with RGB.</step>
    <step>On "unused argument" error, retry with RGB to handle older wrappers.</step>
    <step>Re-install and run devtools::test() locally.</step>
    <output>change-plan</output>
  </plan>

  <!-- 2) EDITS -->
  <edits auto_approve="true">
    <file path="R/api-render.R" mode="patch">
      <![CDATA[
*** Begin Patch
*** Update File: R/api-render.R
@@
   # Prefer native headless path if registered by extendr:
   if (exists("vk_render_headless", where = asNamespace("vulkanR"), inherits = FALSE)) {
-    # Background RGBA defaults (dark gray) for now; will be scene-driven later.
-    out <- tryCatch(
-      vk_render_headless(as.integer(width), as.integer(height),
-                         as.integer(32L), as.integer(32L), as.integer(32L), as.integer(255L)),
-      error = function(e) stop("vk_render_headless() failed: ", conditionMessage(e), call. = FALSE)
-    )
+    # Background color defaults (dark gray); add alpha if supported.
+    # Be resilient to vk_render_headless() arity (5 args: RGB; 6 args: RGBA).
+    fh <- get("vk_render_headless", envir = asNamespace("vulkanR"))
+    nformals <- tryCatch(length(formals(fh)), error = function(e) NA_integer_)
+    call6 <- list(as.integer(width), as.integer(height),
+                  as.integer(32L), as.integer(32L), as.integer(32L), as.integer(255L))
+    call5 <- call6[1:5]
+    out <- tryCatch({
+      if (is.finite(nformals) && !is.na(nformals) && nformals >= 6L) {
+        do.call(fh, call6)
+      } else {
+        do.call(fh, call5)
+      }
+    }, error = function(e) {
+      msg <- conditionMessage(e)
+      # Back-off path for older wrappers: if alpha is "unused argument", call RGB.
+      if (grepl("unused argument", msg, fixed = TRUE)) {
+        return(do.call(fh, call5))
+      }
+      stop("vk_render_headless() failed: ", msg, call. = FALSE)
+    })
@@
-    if (!is.null(file)) {
+    if (!is.null(file)) {
       if (is.raw(out)) {
         writeBin(out, file)
         return(invisible(file))
       }
       if (is.character(out) && length(out) == 1L && nzchar(out) && file.exists(out)) {
         ok <- file.copy(out, file, overwrite = TRUE)
         try(unlink(out), silent = TRUE)
         if (!ok) stop("Failed to copy rendered PNG to '", file, "'.", call. = FALSE)
         return(invisible(file))
       }
       stop("Unexpected return from vk_render_headless(): expected raw bytes or a file path.", call. = FALSE)
     }
*** End Patch
      ]]>
    </file>
  </edits>

  <!-- 3) VERIFY LOCALLY -->
  <verification>
    <commands shell="powershell">
      <![CDATA[
$ErrorActionPreference = "Stop"
# Locate Rscript
$R = $null
try { $R = (Get-Command Rscript -ErrorAction Stop).Source } catch {
  $root = "C:\Program Files\R"
  if (Test-Path $root) { $R = (Get-ChildItem $root -Recurse -Filter Rscript.exe | Select-Object -First 1).FullName }
}
if (-not $R) { throw "Rscript.exe not found on PATH or common locations." }
Write-Host "[verify] Using Rscript: $R"

# Install & test (no roxygen changes in this patch)
& $R -e "if(!requireNamespace('devtools', quietly=TRUE)) install.packages('devtools', repos='https://cloud.r-project.org'); devtools::install(upgrade='never'); devtools::test()" | Out-Host
      ]]>
    </commands>

    <commands shell="bash">
      <![CDATA[
set -e
RSCRIPT="$(command -v Rscript || true)"
[ -z "$RSCRIPT" ] && echo "Rscript not found on PATH" && exit 1
echo "[verify] Using Rscript: $RSCRIPT"

"$RSCRIPT" -e "if(!requireNamespace('devtools', quietly=TRUE)) install.packages('devtools', repos='https://cloud.r-project.org'); devtools::install(upgrade='never'); devtools::test()"
      ]]>
    </commands>

    <checks>
      <item>render-headless tests pass (no "unused argument" error).</item>
      <item>No new failures introduced.</item>
    </checks>
    <output>test-report</output>
  </verification>

  <deliverables>
    <item>inventory-report</item>
    <item>change-plan</item>
    <item>test-report</item>
  </deliverables>

  <notes>
    <item>This keeps the R API stable and avoids Rust edits; later you can standardize on RGBA in vk_render_headless() and drop the compatibility branch.</item>
    <item>Tests remain CI-safe (headless, fast, no windowing).</item>
  </notes>
</claude-code-task>
